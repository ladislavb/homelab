---
haproxy_config_file: "/etc/haproxy/haproxy.cfg"
haproxy_ssl_path: "/etc/ssl/haproxy/"

haproxy_global: |
  global
          log /dev/log local0
          log /dev/log local1 notice
          chroot /var/lib/haproxy
          stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
          stats timeout 30s
          user haproxy
          group haproxy
          daemon

          # Default SSL material locations
          ca-base /etc/ssl/certs
          crt-base /etc/ssl/private

          # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
          ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GC$
          ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
          ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

haproxy_defaults: |
  defaults
          log global
          mode http
          option httplog
          option dontlognull
          timeout connect 5000
          timeout client 50000
          timeout server 50000
          errorfile 400 /etc/haproxy/errors/400.http
          errorfile 403 /etc/haproxy/errors/403.http
          errorfile 408 /etc/haproxy/errors/408.http
          errorfile 500 /etc/haproxy/errors/500.http
          errorfile 502 /etc/haproxy/errors/502.http
          errorfile 503 /etc/haproxy/errors/503.http
          errorfile 504 /etc/haproxy/errors/504.http

haproxy_frontends: |
  frontend in_80
          bind *:80
          mode http
          option forwardfor

          # Test URI to see if its a letsencrypt request
          # acl letsencrypt-acl path_beg /.well-known/acme-challenge/
          # use_backend out_letsencrypt if letsencrypt-acl

          # Route to correct backends
          # use_backend out_app3 if { hdr(host) -i app3.acme.com  }

          # Else redirect to https
          default_backend out_redirect_https

  frontend in_443
          bind *:443
          mode tcp
          option tcplog
          tcp-request inspect-delay 5s
          tcp-request content capture req.ssl_sni len 100
          tcp-request content accept if { req_ssl_hello_type 1 }

          # TCP balanced-only frontends are routed directly to backend
          # use_backend out_app1 if { req.ssl_sni -i app1.acme.com }

          # For other frontends, use http (ssl-termination) mode
          default_backend out_tcp_443_to_https_44300

  frontend in_44300
          bind 127.0.0.1:44300 ssl #crt /etc/ssl/LE/
          option forwardfor
          http-request set-header X-Forwarded-Proto https

          # Route to correct backends
          # use_backend out_app3 if { hdr(host) -i app3.acme.com }

haproxy_backends: |
  backend out_tcp_443_to_https_44300
          mode tcp
          option tcplog
          server haproxy-https 127.0.0.1:44300

  backend out_redirect_https
          redirect scheme https if !{ ssl_fc }

  # backend out_letsencrypt
  #         server letsencrypt 127.0.0.1:8888

  # TCP balancer / SSL passtrough

  # backend out_app1
  #         mode tcp
  #         option tcplog
  #         server app1 192.168.0.11:443

  # backend out_app2
  #         mode tcp
  #         option tcplog
  #         server app2 192.168.0.12:25565

  # Reverse proxy / SSL termination

  # backend out_app3
  #        server app3 localhost:8080